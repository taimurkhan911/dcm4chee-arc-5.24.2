/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.71
 * Generated at: 2022-01-10 18:29:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class seriesDetails_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/tlds/SeriesDetails.tld", Long.valueOf(1614217482000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"ErrorPage.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--\n");
      out.write("/* ***** BEGIN LICENSE BLOCK *****\n");
      out.write("* Version: MPL 1.1/GPL 2.0/LGPL 2.1\n");
      out.write("*\n");
      out.write("* The contents of this file are subject to the Mozilla Public License Version\n");
      out.write("* 1.1 (the \"License\"); you may not use this file except in compliance with\n");
      out.write("* the License. You may obtain a copy of the License at\n");
      out.write("* http://www.mozilla.org/MPL/\n");
      out.write("*\n");
      out.write("* Software distributed under the License is distributed on an \"AS IS\" basis,\n");
      out.write("* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n");
      out.write("* for the specific language governing rights and limitations under the\n");
      out.write("* License.\n");
      out.write("*\n");
      out.write("* The Original Code is part of Oviyam, an web viewer for DICOM(TM) images\n");
      out.write("* hosted at http://skshospital.net/pacs/webviewer/oviyam_0.6-src.zip\n");
      out.write("*\n");
      out.write("* The Initial Developer of the Original Code is\n");
      out.write("* Raster Images\n");
      out.write("* Portions created by the Initial Developer are Copyright (C) 2014\n");
      out.write("* the Initial Developer. All Rights Reserved.\n");
      out.write("*\n");
      out.write("* Contributor(s):\n");
      out.write("* Babu Hussain A\n");
      out.write("* Devishree V\n");
      out.write("* Meer Asgar Hussain B\n");
      out.write("* Prakash J\n");
      out.write("* Suresh V\n");
      out.write("*\n");
      out.write("* Alternatively, the contents of this file may be used under the terms of\n");
      out.write("* either the GNU General Public License Version 2 or later (the \"GPL\"), or\n");
      out.write("* the GNU Lesser General Public License Version 2.1 or later (the \"LGPL\"),\n");
      out.write("* in which case the provisions of the GPL or the LGPL are applicable instead\n");
      out.write("* of those above. If you wish to allow use of your version of this file only\n");
      out.write("* under the terms of either the GPL or the LGPL, and not to allow others to\n");
      out.write("* use your version of this file under the terms of the MPL, indicate your\n");
      out.write("* decision by deleting the provisions above and replace them with the notice\n");
      out.write("* and other provisions required by the GPL or the LGPL. If you do not delete\n");
      out.write("* the provisions above, a recipient may use your version of this file under\n");
      out.write("* the terms of any one of the MPL, the GPL or the LGPL.\n");
      out.write("*\n");
      out.write("* ***** END LICENSE BLOCK ***** */\n");
      out.write("-->\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("\n");
      out.write("     <style>\n");
      out.write("        /* To hide toolbar (top curve) */\n");
      out.write("       /* .dataTables_wrapper .fg-toolbar\n");
      out.write("        {\n");
      out.write("            display: none;\n");
      out.write("        }*/\n");
      out.write("        .dataTables_wrapper{\n");
      out.write("            border-collapse: collapse;\n");
      out.write("            border: none;\n");
      out.write("        }\n");
      out.write("        .display{\n");
      out.write("            border-collapse: collapse;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<table class=\"display\" cellspacing=\"20\" style=\"font-size:14px;\">\n");
      out.write("    <thead>\n");
      out.write("        <tr>\n");
      out.write("            <th>Series Number</th>\n");
      out.write("            <th>Series Date</th>\n");
      out.write("            <th>Series Desc</th>\n");
      out.write("            <th>Modality</th>\n");
      out.write("            <th>Image Count</th>\n");
      out.write("        </tr>\n");
      out.write("    </thead>\n");
      out.write("    <tbody>\n");
      out.write("        ");
      if (_jspx_meth_ser_005fSeries_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("    </tbody>\n");
      out.write("</table>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_ser_005fSeries_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  ser:Series
    in.raster.oviyam.handler.SeriesDetailsHandler _jspx_th_ser_005fSeries_005f0 = new in.raster.oviyam.handler.SeriesDetailsHandler();
    _jsp_getInstanceManager().newInstance(_jspx_th_ser_005fSeries_005f0);
    try {
      _jspx_th_ser_005fSeries_005f0.setJspContext(_jspx_page_context);
      // /seriesDetails.jsp(80,8) name = patientId type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_ser_005fSeries_005f0.setPatientId((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.patient}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      // /seriesDetails.jsp(80,8) name = study type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_ser_005fSeries_005f0.setStudy((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.study}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      // /seriesDetails.jsp(80,8) name = dcmURL type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_ser_005fSeries_005f0.setDcmURL((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.dcmURL}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      _jspx_th_ser_005fSeries_005f0.setJspBody(new Helper( 0, _jspx_page_context, _jspx_th_ser_005fSeries_005f0, null));
      _jspx_th_ser_005fSeries_005f0.doTag();
    } finally {
      _jsp_getInstanceManager().destroyInstance(_jspx_th_ser_005fSeries_005f0);
    }
    return false;
  }

  private class Helper
      extends org.apache.jasper.runtime.JspFragmentHelper
  {
    private javax.servlet.jsp.tagext.JspTag _jspx_parent;
    private int[] _jspx_push_body_count;

    public Helper( int discriminator, javax.servlet.jsp.JspContext jspContext, javax.servlet.jsp.tagext.JspTag _jspx_parent, int[] _jspx_push_body_count ) {
      super( discriminator, jspContext, _jspx_parent );
      this._jspx_parent = _jspx_parent;
      this._jspx_push_body_count = _jspx_push_body_count;
    }
    public boolean invoke0( javax.servlet.jsp.JspWriter out ) 
      throws java.lang.Throwable
    {
      out.write("\n");
      out.write("        <tr>\n");
      out.write("            <td align=\"center\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${seriesNumber}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\n");
      out.write("            <td align=\"center\" data-order=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${dateOrder}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write('"');
      out.write('>');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${seriesDate}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${seriesTime}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\n");
      out.write("            <td align=\"center\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${seriesDesc}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\n");
      out.write("            <td align=\"center\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${modality}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\n");
      out.write("            <td align=\"center\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${numberOfImages}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\n");
      out.write("        </tr>\n");
      out.write("        ");
      return false;
    }
    public void invoke( java.io.Writer writer )
      throws javax.servlet.jsp.JspException
    {
      javax.servlet.jsp.JspWriter out = null;
      if( writer != null ) {
        out = this.jspContext.pushBody(writer);
      } else {
        out = this.jspContext.getOut();
      }
      try {
        Object _jspx_saved_JspContext = this.jspContext.getELContext().getContext(javax.servlet.jsp.JspContext.class);
        this.jspContext.getELContext().putContext(javax.servlet.jsp.JspContext.class,this.jspContext);
        switch( this.discriminator ) {
          case 0:
            invoke0( out );
            break;
        }
        jspContext.getELContext().putContext(javax.servlet.jsp.JspContext.class,_jspx_saved_JspContext);
      }
      catch( java.lang.Throwable e ) {
        if (e instanceof javax.servlet.jsp.SkipPageException)
            throw (javax.servlet.jsp.SkipPageException) e;
        throw new javax.servlet.jsp.JspException( e );
      }
      finally {
        if( writer != null ) {
          this.jspContext.popBody();
        }
      }
    }
  }
}
